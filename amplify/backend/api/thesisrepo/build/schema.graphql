
type Paper {
  id: ID!
  title: String!
  description: String!
  likes: Int!
  author: String!
  list: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPaperConnection {
  items: [Paper]!
  nextToken: String
}

input ModelPaperFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  likes: ModelIntInput
  author: ModelStringInput
  list: ModelStringInput
  and: [ModelPaperFilterInput]
  or: [ModelPaperFilterInput]
  not: ModelPaperFilterInput
}

type Query {
  getPaper(id: ID!): Paper
  listPapers(filter: ModelPaperFilterInput, limit: Int, nextToken: String): ModelPaperConnection
}

input ModelPaperConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  likes: ModelIntInput
  author: ModelStringInput
  list: ModelStringInput
  and: [ModelPaperConditionInput]
  or: [ModelPaperConditionInput]
  not: ModelPaperConditionInput
}

input CreatePaperInput {
  id: ID
  title: String!
  description: String!
  likes: Int!
  author: String!
  list: String
}

input UpdatePaperInput {
  id: ID!
  title: String
  description: String
  likes: Int
  author: String
  list: String
}

input DeletePaperInput {
  id: ID!
}

type Mutation {
  createPaper(input: CreatePaperInput!, condition: ModelPaperConditionInput): Paper
  updatePaper(input: UpdatePaperInput!, condition: ModelPaperConditionInput): Paper
  deletePaper(input: DeletePaperInput!, condition: ModelPaperConditionInput): Paper
}

input ModelSubscriptionPaperFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  likes: ModelSubscriptionIntInput
  author: ModelSubscriptionStringInput
  list: ModelSubscriptionStringInput
  and: [ModelSubscriptionPaperFilterInput]
  or: [ModelSubscriptionPaperFilterInput]
}

type Subscription {
  onCreatePaper(filter: ModelSubscriptionPaperFilterInput): Paper @aws_subscribe(mutations: ["createPaper"])
  onUpdatePaper(filter: ModelSubscriptionPaperFilterInput): Paper @aws_subscribe(mutations: ["updatePaper"])
  onDeletePaper(filter: ModelSubscriptionPaperFilterInput): Paper @aws_subscribe(mutations: ["deletePaper"])
}

